# Modus Web Components - Common Patterns & Best Practices

## Component Implementation Patterns

### 1. Form Components Pattern

```html
<!-- Standard form component structure -->
<modus-wc-text-input
  id="email-input"
  label="Email Address"
  type="email"
  required
  placeholder="Enter your email"
  aria-label="Email address input"
></modus-wc-text-input>

<modus-wc-input-feedback
  for="email-input"
  level="error"
  message="Please enter a valid email address"
></modus-wc-input-feedback>
```

### 2. Interactive Demo Pattern

```html
<div class="section">
  <h2><i class="modus-icons">settings</i>Interactive Demo</h2>
  <div class="interactive-demo">
    <modus-wc-[component] id="demo-component">
      <!-- Demo content -->
    </modus-wc-[component]>
  </div>
  <div class="demo-controls">
    <div class="control-group">
      <label for="demo-attribute">Attribute:</label>
      <select id="demo-attribute" onchange="updateDemoComponent()">
        <option value="value1">Option 1</option>
        <option value="value2">Option 2</option>
      </select>
    </div>
  </div>
</div>
```

### 3. Component Statistics Pattern

```html
<div class="section">
  <h2><i class="modus-icons">bar_graph</i>Component Statistics</h2>
  <div class="stats-grid">
    <div class="stat-card">
      <div class="stat-number">5</div>
      <div class="stat-label">Variants</div>
    </div>
    <div class="stat-card">
      <div class="stat-number">3</div>
      <div class="stat-label">Sizes</div>
    </div>
  </div>
</div>
```

## JavaScript Patterns

### 1. Component Initialization Pattern

```javascript
// Always wait for DOM and components to be ready
document.addEventListener("DOMContentLoaded", function () {
  // Initialize component options
  const component = document.getElementById("my-component");
  if (component) {
    component.options = {
      title: "My Title",
      description: "Description text",
      icon: "star",
    };
  }
});
```

### 2. Interactive Demo Pattern

```javascript
function updateDemoComponent() {
  const component = document.getElementById("demo-component");
  const attribute = document.getElementById("demo-attribute").value;

  // Update component attributes
  component.setAttribute("attribute", attribute);

  // Handle boolean attributes
  const enabled = document.getElementById("demo-enabled").value === "true";
  if (enabled) {
    component.setAttribute("enabled", "");
  } else {
    component.removeAttribute("enabled");
  }
}

// Make functions global for HTML onchange attributes
window.updateDemoComponent = updateDemoComponent;
```

### 3. Event Handling Pattern

```javascript
// Add event listeners to components
document.addEventListener("DOMContentLoaded", function () {
  document.querySelectorAll("modus-wc-button").forEach((button) => {
    button.addEventListener("buttonClick", function (e) {
      console.log("Button clicked:", e.target);
      // Handle button click
    });
  });
});
```

## CSS Patterns

### 1. Component-Specific Styles

```css
/* Use semantic color variables */
.component-demo {
  background-color: var(--modus-wc-color-base-100);
  border: 1px solid var(--modus-wc-color-base-300);
  border-radius: 8px;
  padding: 20px;
  margin: 15px 0;
}

/* Interactive demo styles */
.interactive-demo {
  background-color: var(--modus-wc-color-base-page);
  border: 2px dashed var(--modus-wc-color-base-300);
  border-radius: 8px;
  padding: 30px;
  margin: 20px 0;
}
```

### 2. Layout Patterns

```css
/* Flexbox layouts */
.flex-row {
  display: flex;
  gap: 15px;
  flex-wrap: wrap;
  align-items: center;
  justify-content: center;
  margin: 15px 0;
}

.flex-column {
  display: flex;
  flex-direction: column;
  gap: 15px;
  align-items: center;
  margin: 15px 0;
}
```

### 3. Grid Layouts

```css
.example-grid {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
  gap: 20px;
  margin: 20px 0;
}

.stats-grid {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
  gap: 15px;
  margin: 20px 0;
}
```

## Component-Specific Patterns

### 1. Select Component Pattern

```javascript
// modus-wc-select requires JavaScript configuration
const select = document.getElementById("my-select");
select.options = [
  { label: "Option 1", value: "1" },
  { label: "Option 2", value: "2", disabled: true },
  { label: "Option 3", value: "3" },
];
```

### 2. Modal Component Pattern

```html
<modus-wc-modal modal-id="myModal" aria-label="Example modal">
  <span slot="header">Modal Title</span>
  <div slot="content">
    <p>Modal content goes here</p>
  </div>
  <modus-wc-button
    slot="footer"
    onclick="document.getElementById('myModal').close()"
  >
    Close
  </modus-wc-button>
</modus-wc-modal>
```

### 3. Alert Component Pattern

```html
<!-- Correct attribute names -->
<modus-wc-alert
  variant="success"
  alert-title="Success message"
></modus-wc-alert>
<modus-wc-alert variant="error" alert-title="Error message"></modus-wc-alert>
<modus-wc-alert
  variant="warning"
  alert-title="Warning message"
></modus-wc-alert>
<modus-wc-alert variant="info" alert-title="Info message"></modus-wc-alert>
```

### 4. Toast Component Pattern

```javascript
// Toast requires dynamic creation
function showToast(message, type = "info") {
  const toast = document.createElement("modus-wc-toast");
  const alert = document.createElement("modus-wc-alert");

  alert.setAttribute("variant", type);
  alert.setAttribute("alert-title", message);

  toast.appendChild(alert);
  document.body.appendChild(toast);

  // Auto-remove after 5 seconds
  setTimeout(() => {
    document.body.removeChild(toast);
  }, 5000);
}
```

## Accessibility Patterns

### 1. ARIA Labels

```html
<!-- Always include aria-label for interactive elements -->
<modus-wc-button aria-label="Save changes">Save</modus-wc-button>
<modus-wc-button shape="circle" aria-label="Delete item">
  <i class="modus-icons">delete</i>
</modus-wc-button>
```

### 2. Form Accessibility

```html
<!-- Use proper form structure -->
<modus-wc-input-label for="email-input"> Email Address </modus-wc-input-label>
<modus-wc-text-input
  id="email-input"
  type="email"
  required
  aria-describedby="email-help"
></modus-wc-text-input>
<modus-wc-input-feedback
  id="email-help"
  for="email-input"
  level="info"
  message="We'll never share your email"
></modus-wc-input-feedback>
```

### 3. Keyboard Navigation

```javascript
// Ensure keyboard accessibility
document.addEventListener("keydown", function (e) {
  if (e.key === "Escape") {
    // Close modals or dropdowns
    const openModal = document.querySelector("modus-wc-modal[open]");
    if (openModal) {
      openModal.close();
    }
  }
});
```

## Common Anti-Patterns to Avoid

### ❌ Wrong Select Usage

```html
<!-- DON'T: Use child option elements -->
<modus-wc-select>
  <option value="1">Option 1</option>
  <option value="2">Option 2</option>
</modus-wc-select>
```

### ❌ Wrong Alert Attributes

```html
<!-- DON'T: Use incorrect attribute names -->
<modus-wc-alert type="success" message="Hello"></modus-wc-alert>
```

### ❌ Wrong Toast Usage

```javascript
// DON'T: Try to use toast as a service
toast.show({ message: "Hello" });
```

### ✅ Correct Patterns

```javascript
// DO: Configure select with JavaScript
select.options = [
  { label: "Option 1", value: "1" },
  { label: "Option 2", value: "2" },
];

// DO: Use correct alert attributes
<modus-wc-alert variant="success" alert-title="Hello"></modus-wc-alert>;

// DO: Create toast elements dynamically
const toast = document.createElement("modus-wc-toast");
const alert = document.createElement("modus-wc-alert");
alert.setAttribute("alert-title", "Hello");
toast.appendChild(alert);
document.body.appendChild(toast);
```
